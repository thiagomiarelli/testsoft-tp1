// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Question {
  id           String     @default(cuid()) @id
  text         String
  university   String?
  subject      String?
  alternatives Alternative[]
  topics       Topic[]
  answers      Answer[]
  createdAt    DateTime   @default(now()) @map(name: "created_at")
}

model Alternative {
  id        String     @default(cuid()) @id
  text      String
  correct   Boolean
  question  Question   @relation(fields: [question_id], references: [id])
  question_id String
  answers   Answer[]
}

model Topic {
  id        String    @default(cuid()) @id
  name      String
  subject   String  @default("")
  questions Question[]
}

model Answer {
  id           String      @default(cuid()) @id
  question     Question    @relation(fields: [question_id], references: [id])
  alternative  Alternative @relation(fields: [alternative_id], references: [id])
  user         User        @relation(fields: [user_id], references: [id])
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  question_id  String
  user_id      String
  alternative_id String
  isCorrect    Boolean
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  answers       Answer[]   // Add this field to establish the relationship
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
